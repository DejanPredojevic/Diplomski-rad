package controller;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;

import util.Singleton;

public class FileFix implements ActionListener {
	/**
	 * #35 traka ima 683 sektora sa po 256 byte u svakom
	 * #40 traka ima 768 sektora sa po 256 byte u svakom
	 * 
	 * #35 traka , no eror -------> 174848 byte
	 * #35 traka , 683 eror byte -> 175531 byte
	 * 
	 * #40 traka , no eror -------> 196608 byte
	 * #40 traka , 768 eror byte -> 197376 byte
	 * 
	 */
	@Override
	public void actionPerformed(ActionEvent arg0) {
		/** 
		 * 
		 * 1.For kroz sve filove
		 * 2.Izvuci byte[] u jednu listu
		 * 3.Proveri dal su svi 35 traka ili 40 traca kombinacije ne mogu ...
		 * 4.ako su svi isti idemo na algoritam
		 * 5.Nadjem fajl sa najmanje gresaka
		 * 6.Prekopiram taj u novi byte[] ...
		 * 6.prodjem redom kroz greske i naidjem na prvu zapamtim koji sektor(blok ima gresku)
		 * 7.Pogledam u ostalim fajlovima da li na tom sektoru ima greska ako nema taj sektor kopiram u noviSektor i prepravlja da je ta
		 * 	 sektor sada ispravan
		 * 8.Postupak nastaviti doo kraja fajla.
		 * 9.Po zavrsetku sacuvati novo napravljeni ispravnjeni bute[] kao .d64 ....
		 * 
		 */
		if(Singleton.getInstance().getCompare().getCompare().size() != 0) {
			byte[] newFile = null;
			int best = 1000;
			for (File file : Singleton.getInstance().getCompare().getCompare()) {
				byte[] fileContent = null;
				try {
					fileContent = Files.readAllBytes(file.toPath());
				} catch (IOException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
				
				if(fileContent.length == 175531) {
					int temp = 0;
					for(int i=fileContent.length-1 ; i > fileContent.length-684 ; i--) {
				        if(fileContent[i] != 1) {
				        	temp++;
				        }
				    }
					if(temp <= best) {
						best = temp;
						newFile = fileContent;
					}
				}else if(fileContent.length == 174848){
					newFile = fileContent;
					best = -1;
				}else if(fileContent.length == 197376){
					int temp = 0;
					for(int i=fileContent.length-1 ; i > fileContent.length-769 ; i--) {
				        if(fileContent[i] == 1) {
				        }else {
				        	temp++;
				        }
				    }
					if(temp <= best) {
						best = temp;
						newFile = fileContent;
					}
				}else if(fileContent.length == 196608){
					newFile = fileContent;
					best = -1;
				}	
				Singleton.getInstance().getCompare().setFiles(fileContent);
			}
			if(best != -1) {
				if(newFile.length == 175531) {
					for(int i=newFile.length-683 ; i < newFile.length-1 ; i++) {
						if(newFile[i] != 1) {
							for (byte[] b : Singleton.getInstance().getCompare().getFiles()) {
								if(b[i] == 1) {
									for(int j = (i-174848)*256;j < (i-174848)*256+256 ; j++) {
										newFile[j] = b[j];
									}
									newFile[i] = 1;
									break;
								}
							}
						}
				    }
				}else if(newFile.length == 197376){
					for(int i=newFile.length-768 ; i < newFile.length-1 ; i++) {
						if(newFile[i] != 1) {
							for (byte[] b : Singleton.getInstance().getCompare().getFiles()) {
								if(b[i] == 1) {
									for(int j = (i-196608)*256;j < (i-196608)*256+256 ; j++) {
										newFile[j] = b[j];
									}
									newFile[i] = 1;
									break;
								}
							}
						}
				    }
				}
				Singleton.getInstance().getFiles().setNewFile(newFile);
				
			}else {
				System.out.println("USAO U Drugi");
				Singleton.getInstance().getFiles().setNewFile(newFile);
				
			}
		}
	}
		
}
