package view;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.GridLayout;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.util.Observable;

import javax.imageio.ImageIO;
import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.BoxLayout;
import javax.swing.ButtonGroup;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JRadioButton;
import javax.swing.JScrollPane;
import javax.swing.border.Border;
import javax.swing.border.EmptyBorder;

import controller.FileChooser;
import controller.FileCompare;
import controller.FileFix;
import controller.FileSave;
import controller.FileShow;
import util.Singleton;

public class MainWindow extends JFrame implements java.util.Observer{
	
	// TODO Fizuelni bug kod selektovanja scrol panel se skuplja ...
	// winvice instalirati...
	// Ponedeljak 12:15
	
	private static final long serialVersionUID = 1L;
	private JPanel left;
	private JButton select;
	private JButton save;
	private JButton fix;
	private JPanel buttons;
	private JPanel pregled;
	private JPanel right;
	private JPanel fajls;
	private JPanel info;
	float[] f = Color.RGBtoHSB(183, 200, 241, null);
	
	public MainWindow() {
		//main window podesavanja
		setTitle("JavaD64Fix v1.1.1");
		setMinimumSize(new Dimension(600,700));
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		//setResizable(false);
		
		//Levi panel(dugmad i pregled fajlova)
		left = LeftPanel();
		left.setBorder(new EmptyBorder(10, 10, 10, 10));
		add(left,BorderLayout.WEST);
		
		//desni panel(prikaz po blokovima svakog fajla)
		right = RightPanel();
		right.setBorder(new EmptyBorder(10, 10, 10, 10));
		add(right,BorderLayout.CENTER);
		
		info = new JPanel();
		
		Border blackline = BorderFactory.createLineBorder(Color.black);
		info.setBorder(blackline);
		info.add(new JLabel("Welcome to JavaD64Fix."));
		add(info,BorderLayout.SOUTH);
		
		setVisible(true);
		pack();
	}

	//LEVI PANEL
	private JPanel LeftPanel() {
		left = new JPanel();
		left.setLayout(new BoxLayout(left, BoxLayout.Y_AXIS));
		left.setSize(new Dimension(225,getHeight()));
		//dugmad
		select = new JButton("Select D64");
		select.addActionListener(new FileChooser());
		save = new JButton("Save D64");
		save.addActionListener(new FileSave());
		GridLayout grid = new GridLayout(3,1,10,10);
		fix = new JButton("Fix selected D64");
		fix.addActionListener(new FileFix());
		buttons = new JPanel();
		buttons.setMaximumSize(new Dimension(150,100));
		buttons.setLayout(grid);
		buttons.add(select);
		buttons.add(fix);
		buttons.add(save);
		left.add(Box.createVerticalStrut(10));
		left.add(buttons);
		left.add(Box.createVerticalStrut(20)); 
		left.setVisible(true);
		//pregled fajlova
		pregled = new JPanel();
		pregled.setLayout(new BoxLayout(pregled, BoxLayout.Y_AXIS));
		
		JPanel label = new JPanel();
		label.setMaximumSize(new Dimension(225,35));
		JLabel show = new JLabel("Sh");
		show.setHorizontalAlignment(JLabel.CENTER);
		JLabel compare = new JLabel("Cm");
		compare.setHorizontalAlignment(JLabel.CENTER);
		JLabel name = new JLabel("d64 image");
		name.setHorizontalAlignment(JLabel.CENTER);
		show.setFont(new Font("Serif", Font.PLAIN, 17));
		compare.setFont(new Font("Serif", Font.PLAIN, 17));
		name.setFont(new Font("Serif", Font.PLAIN, 17));
		label.add(show);
		label.add(compare);
		label.add(name);
		pregled.add(label);
		fajls = new JPanel();
		fajls.setLayout(new BoxLayout(fajls, BoxLayout.Y_AXIS));
		
		JScrollPane p = new JScrollPane(fajls);
		p.setMinimumSize(new Dimension(225,225));
		p.setMaximumSize(new Dimension(225,225));
		p.setBorder(null);
		pregled.add(p);
		left.add(pregled);
		return left;
	}
	
	private JPanel RightPanel() {
		right = new JPanel();
		
		return right;
	}


	@Override
	public void update(Observable o, Object arg) {
		// TODO Auto-generated method stub
		ButtonGroup bgroup = new ButtonGroup();
		JPanel label = new JPanel();
		label.setMaximumSize(new Dimension(225,35));
		left.add(label);
		if(arg.equals("FAJLOVI")) {
			fajls.removeAll();
			fajls.setMinimumSize(new Dimension(225,225));
			fajls.setMaximumSize(new Dimension(225,225));
			for (File file : Singleton.getInstance().getFiles().getFiles()) {
				JPanel fajl = new JPanel();
				
				fajl.setMaximumSize(new Dimension(225,35));
				JRadioButton r = new JRadioButton();
				r.addActionListener(new FileShow(file));
				bgroup.add(r);
				r.setHorizontalAlignment(JLabel.CENTER);
				JCheckBox c = new JCheckBox();
				c.addActionListener(new FileCompare(file));
				c.setHorizontalAlignment(JLabel.CENTER);
				JLabel l = new JLabel(file.getName());
				fajl.add(r);
				fajl.add(c);
				fajl.add(l);
				fajls.add(fajl);
				
			}
			fajls.updateUI();
			fajls.repaint();
			fajls.revalidate();
		}else if(arg.equals("FAJL")) {
			right.removeAll();
			info.removeAll();
			GridBagLayout gridBag = new GridBagLayout();
			GridBagConstraints c = new GridBagConstraints();
			right.setLayout(gridBag);
			int j = 0,k = 0;
			//For each component to be added to this container:
			//...Create the component...
			//...Set instance variables in the GridBagConstraints instance...
			
			byte[] fileContent = null;
			try {
				fileContent = Files.readAllBytes(Singleton.getInstance().getFiles().getSelected().toPath());
			} catch (IOException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
			if(fileContent.length == 175531) {
				int temp = 0;
				for(int i=fileContent.length-683 ; i < fileContent.length ; i++) {
					c.gridx = j;
					c.gridy = k;
			        if(fileContent[i] == 1) {
			        	
			        	BufferedImage myPicture = null;
						try {
							myPicture = ImageIO.read(new File("../JavaD64Fix/Img/KockaZelena.png"));
						} catch (IOException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
						JLabel picLabel = new JLabel(new ImageIcon(myPicture));
						Border blackline = BorderFactory.createLineBorder(Color.black);
						picLabel.setBorder(blackline);
						right.add(picLabel, c);
			        }else {
			        	temp++;
			        	BufferedImage myPicture = null;
						try {
							myPicture = ImageIO.read(new File("../JavaD64Fix/Img/KockaCrvena.png"));
						} catch (IOException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
						JLabel picLabel = new JLabel(new ImageIcon(myPicture));
						Border blackline = BorderFactory.createLineBorder(Color.black);
						picLabel.setBorder(blackline);
						right.add(picLabel, c);
			        }
			        if(i < fileContent.length-327 && 0 != (i-174847)) {
						j++;
						if((i-174847) % 21 == 0) {
							k++;
							j=0;
						}
					}else if(i == fileContent.length-327){
						k++;
						j=0;
					}else if(i > fileContent.length-327 && i < fileContent.length-194){
						j++;
						if((i-175204) % 19 == 0) {
							k++;
							j=0;
						}
					}else if(i == fileContent.length-194){
						k++;
						j=0;
					}else if(i > fileContent.length-194 && i < fileContent.length-86){
						j++;
						if((i-175337) % 18 == 0) {
							k++;
							j=0;
						}
					}else if(i == fileContent.length-86){
						k++;
						j=0;
					}else if(i > fileContent.length-86){
						j++;
						if((i-175445) % 17 == 0) {
							k++;
							j=0;
						}
					}
			    }
				
				info.add(new JLabel("Blocks: 683 , Erors: "+ temp ));
			}else if(fileContent.length == 197376) {
				int temp = 0;
				for(int i=fileContent.length-768 ; i > fileContent.length ; i++) {
					c.gridx = j;
					c.gridy = k;
			        if(fileContent[i] == 1) {
			        	BufferedImage myPicture = null;
						try {
							myPicture = ImageIO.read(new File("../JavaD64Fix/Img/KockaZelena.png"));
						} catch (IOException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
						JLabel picLabel = new JLabel(new ImageIcon(myPicture));
						Border blackline = BorderFactory.createLineBorder(Color.black);
						picLabel.setBorder(blackline);
						right.add(picLabel, c);
			        }else {
			        	temp++;
			        	BufferedImage myPicture = null;
						try {
							myPicture = ImageIO.read(new File("../JavaD64Fix/Img/KockaCrvena.png"));
						} catch (IOException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
						JLabel picLabel = new JLabel(new ImageIcon(myPicture));
						Border blackline = BorderFactory.createLineBorder(Color.black);
						picLabel.setBorder(blackline);
						right.add(picLabel, c);
			        }
			        if(i < fileContent.length-327 && 0 != (i-174847)) {
						j++;
						if((i-174847) % 21 == 0) {
							k++;
							j=0;
						}
					}else if(i == fileContent.length-327){
						k++;
						j=0;
					}else if(i > fileContent.length-327 && i < fileContent.length-194){
						j++;
						if((i-175204) % 19 == 0) {
							k++;
							j=0;
						}
					}else if(i == fileContent.length-194){
						k++;
						j=0;
					}else if(i > fileContent.length-194 && i < fileContent.length-86){
						j++;
						if((i-175337) % 18 == 0) {
							k++;
							j=0;
						}
					}else if(i == fileContent.length-86){
						k++;
						j=0;
					}else if(i > fileContent.length-86){
						j++;
						if((i-175445) % 17 == 0) {
							k++;
							j=0;
						}
					}
			    }
				info.add(new JLabel("Blocks: 768 , Erors: "+ temp ));
			}else if(fileContent.length == 174848){
				for(int i=0 ; i < 683 ; i++) {
					c.gridx = j;
					c.gridy = k;
					BufferedImage myPicture = null;
					try {
						myPicture = ImageIO.read(new File("../JavaD64Fix/Img/KockaZelena.png"));
					} catch (IOException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
					JLabel picLabel = new JLabel(new ImageIcon(myPicture));
					Border blackline = BorderFactory.createLineBorder(Color.black);
					picLabel.setBorder(blackline);
					right.add(picLabel, c);
					if(i > 20)
						if(i < 357) {
							j++;
							if(i % 21 == 0) {
								k++;
								j=0;
							}
						}else if(i == 357){
							k++;
							j=0;
						}else if(i > 357 && i < 490){
							j++;
							if((i-357) % 19 == 0) {
								k++;
								j=0;
							}
						}else if(i == 490){
							k++;
							j=0;
						}else if(i > 490 && i < 598){
							j++;
							if((i-490) % 18 == 0) {
								k++;
								j=0;
							}
						}else if(i == 598){
							k++;
							j=0;
						}else if(i > 598){
							j++;
							if((i-598) % 17 == 0) {
								k++;
								j=0;
							}
						}
				}
				info.add(new JLabel("Blocks: 683 , Erors: 0" ));
			}else if(fileContent.length == 196608){
				GridLayout g = new GridLayout(37,21,3,3);
				right.setLayout(g);
				for(int i=0 ; i < 768 ; i++) {
					BufferedImage myPicture = null;
					try {
						myPicture = ImageIO.read(new File("../JavaD64Fix/Img/KockaZelena.png"));
					} catch (IOException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
					JLabel picLabel = new JLabel(new ImageIcon(myPicture));
					Border blackline = BorderFactory.createLineBorder(Color.black);
					picLabel.setBorder(blackline);
					right.add(picLabel);
				}
				info.add(new JLabel("Blocks: 768 , Erors: 0" ));
			}	
			info.updateUI();
			info.repaint();
			info.revalidate();
			right.updateUI();
			right.repaint();
			right.revalidate();
		}else if(arg.equals("FIX")){
			right.removeAll();
			info.removeAll();
			right.setLayout(new FlowLayout());
			byte[] fileContent = Singleton.getInstance().getFiles().getNewFile();
			if(fileContent.length == 175531) {
				int temp = 0;
				for(int i=fileContent.length-1 ; i > fileContent.length-684 ; i--) {
					GridLayout g = new GridLayout(33,21,3,3);
					right.setLayout(g);
			        if(fileContent[i] == 1) {
			        	BufferedImage myPicture = null;
						try {
							myPicture = ImageIO.read(new File("../JavaD64Fix/Img/KockaZelena.png"));
						} catch (IOException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
						JLabel picLabel = new JLabel(new ImageIcon(myPicture));
						Border blackline = BorderFactory.createLineBorder(Color.black);
						picLabel.setBorder(blackline);
						right.add(picLabel);
			        }else {
			        	temp++;
			        	BufferedImage myPicture = null;
						try {
							myPicture = ImageIO.read(new File("../JavaD64Fix/Img/KockaCrvena.png"));
						} catch (IOException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
						JLabel picLabel = new JLabel(new ImageIcon(myPicture));
						Border blackline = BorderFactory.createLineBorder(Color.black);
						picLabel.setBorder(blackline);
						right.add(picLabel);
			        }
			    }
				
				info.add(new JLabel("Fix is done! Blocks: 683 , Erors: "+ temp  + ". If you want to save click save button."));
			}else if(fileContent.length == 197376) {
				int temp = 0;
				GridLayout g = new GridLayout(37,21,3,3);
				right.setLayout(g);
				for(int i=fileContent.length-1 ; i > fileContent.length-769 ; i--) {
					right.setLayout(new FlowLayout(FlowLayout.LEFT));
			        if(fileContent[i] == 1) {
			        	BufferedImage myPicture = null;
						try {
							myPicture = ImageIO.read(new File("../JavaD64Fix/Img/KockaZelena.png"));
						} catch (IOException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
						JLabel picLabel = new JLabel(new ImageIcon(myPicture));
						Border blackline = BorderFactory.createLineBorder(Color.black);
						picLabel.setBorder(blackline);
						right.add(picLabel);
			        }else {
			        	temp++;
			        	BufferedImage myPicture = null;
						try {
							myPicture = ImageIO.read(new File("../JavaD64Fix/Img/KockaCrvena.png"));
						} catch (IOException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
						JLabel picLabel = new JLabel(new ImageIcon(myPicture));
						Border blackline = BorderFactory.createLineBorder(Color.black);
						picLabel.setBorder(blackline);
						right.add(picLabel);
			        }
			    }
				info.add(new JLabel("Fix is done! Blocks: 768 , Erors: "+ temp + ". If you want to save click save button." ));
			}else if(fileContent.length == 174848){
				GridLayout g = new GridLayout(33,21,3,3);
				right.setLayout(g);
				for(int i=0 ; i < 683 ; i++) {
					BufferedImage myPicture = null;
					try {
						myPicture = ImageIO.read(new File("../JavaD64Fix/Img/KockaZelena.png"));
					} catch (IOException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
					JLabel picLabel = new JLabel(new ImageIcon(myPicture));
					Border blackline = BorderFactory.createLineBorder(Color.black);
					picLabel.setBorder(blackline);
					right.add(picLabel);
				}
				info.add(new JLabel("Fix is done! Blocks: 683 , Erors: 0. If you want to save click save button."));
			}else if(fileContent.length == 196608){
				GridLayout g = new GridLayout(37,21,3,3);
				right.setLayout(g);
				for(int i=0 ; i < 768 ; i++) {
					BufferedImage myPicture = null;
					try {
						myPicture = ImageIO.read(new File("../JavaD64Fix/Img/KockaZelena.png"));
					} catch (IOException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
					JLabel picLabel = new JLabel(new ImageIcon(myPicture));
					Border blackline = BorderFactory.createLineBorder(Color.black);
					picLabel.setBorder(blackline);
					right.add(picLabel);
				}
				info.add(new JLabel("Fix is done! Blocks: 768 , Erors: 0. If you want to save click save button." ));
			}	
			info.updateUI();
			info.repaint();
			info.revalidate();
			right.updateUI();
			right.repaint();
			right.revalidate();
			/*newFile.removeAll();
				JPanel fajl = new JPanel();
				
				fajl.setMaximumSize(new Dimension(225,35));
				JRadioButton r = new JRadioButton();
				r.addActionListener(new FileShow(file));
				bgroup.add(r);
				r.setHorizontalAlignment(JLabel.CENTER);
				JCheckBox c = new JCheckBox();
				c.setEnabled(false);
				c.setHorizontalAlignment(JLabel.CENTER);
				JLabel l = new JLabel("blabla.d64");
				fajl.add(r);
				fajl.add(c);
				fajl.add(l);
			newFile.add(fajl);
			newFile.updateUI();
			newFile.repaint();
			newFile.revalidate();*/
		}else {
			info.removeAll();
			info.add(new JLabel(Singleton.getInstance().getFiles().getInfo()));
			info.updateUI();
			info.repaint();
			info.revalidate();
			
		}
		
		repaint();
		revalidate();
	}

}
